<h1>About</h1>
<p>成員:41023106、41023113、41023125、41023153</p>
<p>2ag5倉儲:<a href="https://github.com/mdecd2023/2a2-pj2ag5.git">https://github.com/mdecd2023/2a2-pj2ag5.git</a></p>
<p><span>2ag5網站:<a href="https://mdecd2023.github.io/2a2-pj2ag5">https://mdecd2023.github.io/2a2-pj2ag5</a></span></p>
<p></p>
<div id="gtx-trans" style="position: absolute; left: -36px; top: 153.075px;">
<div class="gtx-trans-icon"></div>
</div>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Brython_ex2</h2>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and <a href="https://plotly.com/javascript/">Plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="mass-spring-damper"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

def dy_dx(y, x):
    y1, y2 = y
    return [y2, -(k/m)*y1 - (c/m)*y2]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [1.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(2)]
    y.append(y_new)

# Create a new div element to hold the plot
'''
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))]}]
layout = {'title': 'Mass-Spring-Damper System', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('mass-spring-damper', data, layout)
</script>
<p>This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="pid-control"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

Kp = 10.0  # proportional gain
Ki = 1.0   # integral gain
Kd = 0.5   # derivative gain

def dy_dx(y, x):
    y1, y2, e_int, e_prev = y
    e = 1 - y1
    de_dt = -y2
    u = Kp * e + Ki * e_int + Kd * de_dt
    return [y2, (u - k*y1 - c*y2)/m, e, e]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [0.0, 0.0, 0.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(4)]
    y.append(y_new)

'''
# Create a new div element to hold the plot
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))], 'name': 'Output'},
        {'x': x, 'y': [1 for _ in range(len(y))], 'name': 'Setpoint'}]
layout = {'title': 'Mass-Spring-Damper System with PID Control', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('pid-control', data, layout)
</script>
<p height="480" id="container" width="640"></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" type="text/javascript"></script>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 / 480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Define the animation loop
def animate(timestamp):
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p height="480" id="container2" width="640"></p>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container2']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 /480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Set up a Raycaster for mouse interaction
raycaster = window.THREE.Raycaster.new()
mouse = window.THREE.Vector2.new()

# Define a function to handle mouse move events
def on_mouse_move(event):
    # Calculate the mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1

# Register the mouse move event handler
document.bind('mousemove', on_mouse_move)

# Define the animation loop
def animate(timestamp):
    # Update the Raycaster with the current mouse position
    raycaster.setFromCamera(mouse, camera)
    
    # Check if the Raycaster intersects with the cube
    intersects = raycaster.intersectObject(cube)
    
    # Change the cube color if it is intersected
    if len(intersects) > 0:
        cube.material.color.set(0xff0000)
    else:
        cube.material.color.set(0x00ff00)
    
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p>STL part viewer</p>
<p height="480" id="stl" width="640"></p>
<script type="text/python">
from browser import document, html

# Create a container for the STL viewer
stl_container = html.DIV(id="stl_cont")
stl = document["stl"]
stl <= stl_container

# Load the Stl Viewer Javascript Plugin
stl_viewer_script = html.SCRIPT(src="https://www.viewstl.com/plugin/stl_viewer.min.js")
stl <= stl_viewer_script

def init_stl_viewer():
    # Create a new instance of Stl Viewer
    stl_viewer = window.StlViewer.new(document.getElementById("stl_cont"), {"models": [{"id": 0, "filename": "/downloads/block100.stl"}]})

# Wait for the Stl Viewer Javascript Plugin to load before initializing the viewer
document.bind("readystatechange", lambda: init_stl_viewer() if document.readyState == "complete" else None)
</script>
<p>Using <a href="https://www.sciencedirect.com/science/article/pii/S0950705115005043">sine-cosine algorithm</a> to optimize with constraints in Brython:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Plot the result by using <a href="https://plotly.com/javascript/">plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;
&lt;div id="plot"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'

# Plot the result using Plotly.js
data = [
    {
        'x': [best_solution[0]],
        'y': [best_solution[1]],
        'mode': 'markers',
        'marker': {'size': 12},
        'name': 'Best Solution'
    }
]

layout = {
    'xaxis': {'range': [-10, 10]},
    'yaxis': {'range': [-10, 10]},
}

Plotly.newPlot('plot', data, layout)
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p></p>
<h1>w9</h1>
<p><span>使用zmqRemoteAPI與組員協同控制</span><a href="https://mdecd2023.github.io/2a2-pj2ag5/content/w9.html">w9</a><span>專案，先匯入場景，使用ipconfig獲取場景ip，將python程式ip進行更改，接著啟動程式，便可操控</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/FkCnjyqxy0I" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/zmq_bubbleRob_red_green.ttt">/downloads/zmq_bubbleRob_red_green.ttt</a></p>
<p><a href="/downloads/1.py">/downloads/1.py</a></p>
<p><a href="/downloads/2.py">/downloads/2.py</a></p>
<p><a href="/downloads/3.py">/downloads/3.py</a></p>
<p><a href="/downloads/4.py">/downloads/4.py</a></p>
<h1>w10</h1>
<p><strong>1.What is zmqRemoteAPI, and how does it relate to CoppeliaSim?</strong></p>
<p>chatgpt:<br/>zmqRemoteAPI 是指基於 ZeroMQ（一種高效的消息傳輸庫）的遠程API（應用程序編程接口），可用於與 CoppeliaSim 仿真軟體進行通訊。<br/>CoppeliaSim 是一個強大的通用機器人仿真軟體，允許用戶設計，模擬和驗證各種機器人系統。</p>
<p>zmqRemoteAPI 允許用戶通過編程語言（如Python、C ++、Java等）與CoppeliaSim進行通訊，從而可以遠程控制和監視仿真場景。<br/>例如，用戶可以通過zmqRemoteAPI控制機器人在仿真環境中移動，並獲取傳感器數據或仿真結果。這使得用戶可以進行自動化測試，優化控制算法等。</p>
<p>總之，zmqRemoteAPI提供了一個強大的工具，使得用戶可以通過編程語言與CoppeliaSim進行通訊，從而實現更強大的仿真控制和自動化。</p>
<p>bing:<br/>zmqRemoteAPI 是 CoppeliaSim 的一種遠程 API，它允許外部應用程序或遠程硬件（例如真實機器人、遠程計算機等）從外部控制仿真（或仿真器本身）1。<br/>zmqRemoteAPI 可以通過多種方式與 CoppeliaSim 進行連接，其中之一就是 ZeroMQ 遠程 API。ZeroMQ 遠程 API 允許從外部應用程序或遠程硬件（例如真實機器人、遠程計算機等）控制仿真（或仿真器本身）1。<br/>ZeroMQ 遠程 API 提供了所有 API 函數，這些函數也可以通過 CoppeliaSim 腳本使用：這包括所有常規 API 函數（即 sim.* -type 函數），但也包括所有 API 函數提供的。</p>
<p><strong></strong></p>
<p><strong></strong></p>
<p><strong>_________________________________________________________________</strong></p>
<div>
<p><strong></strong></p>
<p><strong>2.How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI?</strong></p>
<p>下載<a href="/downloads/zmqRemoteApi.7z">/downloads/zmqRemoteApi.7z</a>解壓縮</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># pip install pyzmq cbor keyboard
 #這是安裝所需的Python庫，包括zmqRemoteAPI、pyzmq、cbor和keyboard。
from zmqRemoteApi import RemoteAPIClient 
#這是從zmqRemoteAPI庫中導入RemoteAPIClient類，用於與CoppeliaSim建立連接。
import keyboard

client = RemoteAPIClient('192.168.254.72', 23000) 
#這是從zmqRemoteAPI庫中導入RemoteAPIClient類，用於與CoppeliaSim建立連接。</pre>
<p><strong></strong></p>
<p><strong>_________________________________________________________________</strong></p>
<p><strong></strong></p>
<p><strong>3.What are some common use cases for zmqRemoteAPI in CoppeliaSim?</strong></p>
<p>使用 zmqRemoteAPI，可以實現許多在 CoppeliaSim 中的常見用例，例如：</p>
<ol>
<li>
<p>遠程控制和監視仿真：通過 zmqRemoteAPI，用戶可以從自己的應用程序中發送命令和數據到 CoppeliaSim，並接收來自 CoppeliaSim 的反饋信息，從而遠程控制和監視仿真過程。這對於進行遠程仿真、調試和測試非常有用。</p>
</li>
<li>
<p>與外部硬件設備集成：使用 zmqRemoteAPI，用戶可以將 CoppeliaSim 與外部硬件設備集成，例如傳感器、執行器等。這可以模擬現實世界的情況，並使用戶能夠測試和驗證他們的控制算法和系統設計。</p>
</li>
<li>
<p>自定義應用程序開發：zmqRemoteAPI 提供了一種靈活和強大的方法來開發自定義應用程序，這些應用程序可以與 CoppeliaSim 集成並使用其仿真能力。例如，可以開發用於自主導航、物流和智能製造的應用程序。</p>
</li>
<li>
<p>與其他軟件系統集成：zmqRemoteAPI 還可以用於將 CoppeliaSim 與其他軟件系統集成，例如 ROS（機器人操作系統）、MATLAB 和 Simulink 等。這可以擴展 CoppeliaSim 的功能，使其與其他系統協同工作，從而實現更複雜的仿真場景和控制算法。</p>
</li>
</ol>
<strong></strong></div>
<div><strong></strong></div>
<div><strong>_________________________________________________________________</strong></div>
<div><strong></strong></div>
<div><strong>4.What are the advantages and disadvantages of using zmqRemoteAPI compared to other methods of communication between Python and CoppeliaSim?</strong></div>
<div><strong></strong></div>
<div><strong></strong>使用 zmqRemoteAPI 與其他 Python 與 CoppeliaSim 之間的通訊方式相比，其優點如下：<br/><br/> 快速：zmqRemoteAPI 通訊速度快，因為它是基於 ZeroMQ 高效的通訊協議建立的。ZeroMQ 具有低延遲、低傳輸成本、高可靠性和高效能等優點，因此可以實現高效的通訊。<br/> 穩定：zmqRemoteAPI 是 CoppeliaSim 官方推薦的 Python 通訊方式之一，因此具有較高的穩定性和可靠性。<br/> 易於使用：zmqRemoteAPI 提供了簡單易用的 API，使用者可以方便地實現 Python 與 CoppeliaSim 之間的通訊</div>
<div>
<p><strong>_________________________________________________________________</strong></p>
<p><strong></strong></p>
<p><strong>5.Can you give an example of a project or task that you could complete using zmqRemoteAPI in CoppeliaSim?</strong></p>
<p>例如我們<span>使用zmqRemoteAPI與組員協同控制</span><a href="https://mdecd2023.github.io/2a2-pj2ag5/content/w9.html">w9</a><span>專案，先匯入場景，使用ipconfig獲取場景ip，將python程式ip進行更改，接著啟動程式，便可操控</span></p>
<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/FkCnjyqxy0I" title="YouTube video player" width="560"></iframe></div>
<p><strong>_________________________________________________________________</strong> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/1qCXpwxw304" title="YouTube video player" width="560"></iframe></p>
<h1>w11</h1>
<p></p>
<p>使用之前組別足球場去改版<a href="/downloads/足球場.STL">足球場.STL</a></p>
<p><strong>測試版先使用</strong>使用長方體擺放成七段顯示器的樣子</p>
<p><a href="/downloads/測試1.ttt">測試1.ttt</a></p>
<p>建立方式為:</p>
<p><span style="color: #000000; background-color: #ffff00;"><strong>Add&gt;Primitive shape&gt;cuboid</strong></span></p>
<p><span style="color: #000000; background-color: #ffff00;"><strong>(加入&gt;原始物件&gt;長方體)</strong></span></p>
<p><strong>初始第一版</strong>記分板<a href="/downloads/記分板ok.stl">記分板ok.stl</a></p>
<p><a href="/downloads/測試1.ttt">測試用記分板.ttt</a></p>
<p>__________________________________________________________________________</p>
<p><em><strong>2023/5/1</strong></em></p>
<p><em><strong>場景組:</strong></em></p>
<p><strong>第二版記分板v1:</strong></p>
<p><strong>使用Onshape繪製我們需要的七段顯示器圖檔，繪製完成後，</strong><strong>匯入<span style="background-color: #ffff00;">File&gt;Import&gt;Mesh</span></strong><br/><strong></strong></p>
<p><strong>，匯入後進行爆炸拆件，<span style="background-color: #ffff00;">Edit&gt;Gourping&gt;Divide selected shape<span style="background-color: #ffffff;">，因為我們是使用變換物件顏色來顯示得分數字，所以物件導入後的拆件動作件特別重要。</span></span></strong></p>
<p><strong><span style="background-color: #ffff00;"><span style="background-color: #ffffff;"></span></span></strong></p>
<p><strong><span>第二版計分版v2:</span></strong></p>
<p><strong><span><span style="background-color: #ffff00;">由於第二版記分板v1，無法在Coppeliasim爆炸成個別零件</span>，無法達成我們想改變計分板顏色來實現計分功能的計畫，<span style="background-color: #ffff00;">因此畫了第二版v2</span>，順利完成爆炸拆件。</span></strong></p>
<p><strong><span><a href="/downloads/scoreboard.ttt">scoreboard.ttt</a></span></strong></p>
<p><strong><span><img caption="false" height="298" src="/images/score.png" width="520"/></span></strong></p>
<p></p>
<p><em><strong>程式組:</strong></em></p>
<p><em><strong></strong></em></p>
<p><strong>讓元件變色的方法:</strong></p>
<p>-- <strong>取得物體句柄:</strong></p>
<p><br/><span style="background-color: #ffff00;">objectHandle = sim.getObjectHandle('ObjectName')</span></p>
<p>像是給程式物件的編號。</p>
<p>-- <strong>取得原始顏色:</strong></p>
<p><br/><span style="background-color: #ffff00;">originalColor = sim.getShapeColor(objectHandle, nil, sim.colorcomponent_ambient_diffuse)</span></p>
<p></p>
<p>-- <strong>定義新的顏色:</strong></p>
<p><br/><span style="background-color: #ffff00;">newColor = {1, 0, 0}</span></p>
<p></p>
<p>-- <strong>設定新的顏色:</strong></p>
<p><br/><span style="background-color: #ffff00;">sim.setShapeColor(objectHandle, nil, sim.colorcomponent_ambient_diffuse, newColor)</span></p>
<p></p>
<p><strong></strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_1FxvbRV65E" title="YouTube video player" width="560"></iframe></p>
<p><strong></strong></p>
<p><strong>應用上面所做的所有工作我們製作出:</strong></p>
<p><span style="background-color: #ffff00;"><strong>四個數字都能透過顏色改變顯示0-9的功能。</strong></span></p>
<p><strong>影片還未推上來。</strong></p>
<p><em><strong>七段顯示器顯示示意畫面:</strong></em></p>
<p><strong><img alt="" height="324" src="/images/9487.jpg" width="582"/></strong></p>
<p><em><strong></strong></em></p>
<p><em><strong>程式碼中的函數定義如下：</strong></em></p>
<p><strong><span>handles：二維陣列，<span style="background-color: #ffff00;">用於儲存分數板上的每個數字或字母的句柄（handle）</span>，以便後續的編程控制。</span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span>color：<span style="background-color: #ffff00;">二維陣列</span>，儲存兩種顏色值，用於<span style="background-color: #ffff00;">改變分數板上的數字</span>或字母的顏色。</span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span>specialNumbers：<span style="background-color: #ffff00;">二維陣列</span>，<span style="background-color: #ffff00;">儲存了每個數字或字母在分數板上的哪些線段需要亮起</span>，以便在後續的編程控制中能夠選擇需要亮起的線段。</span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span>serialNumber：一維陣列，<span style="background-color: #ffff00;">儲存了分數板上的字母或數字標記</span>。</span></strong></p>
<p><strong><span></span></strong></p>
<p><em><strong></strong></em><strong>Number：用於將一個數字或字母顯示在分數板上，並且根<span style="background-color: #ffff00;">據specialNumbers陣列中的數據將需要亮起的線段顯示為顏色color[1]</span>。</strong></p>
<p><br/><strong>sysCall_init：V-REP仿真環境中的初始化函數，用於<span style="background-color: #ffff00;">將分數板上每個數字或字母的句柄儲存到handles陣列</span>中。</strong></p>
<p><br/><strong>sysCall_cleanup：V-REP仿真環境中的清理函數，用於<span style="background-color: #ffff00;">將分數板上的所有數字或字母的顏色恢復為color[2]</span>。</strong></p>
<p><strong>2023/5/1協同影片</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ISCoEtRQ_MM" title="YouTube video player" width="560"></iframe></p>
<h2>程式</h2>
<p> </p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function randomNumber()
    math.randomseed(os.time())
    return {tonumber(math.random(-2, 2) .. '.' .. math.random(0,9)),tonumber(math.random(-1, 1) .. '.' .. math.random(0,4)),1.0}
end
--這段程式碼定義了一個名為randomNumber的函數，當被呼叫時，它會產生一個由三個數字組成的列表（list），這三個數字是從指定範圍中隨機選擇而來的。
--在此函數中，首先使用math.randomseed(os.time())函數設置一個隨機數種子，以保證每次呼叫randomNumber函數時，產生的隨機數是不同的。
--接下來，使用math.random(-2, 2)函數從-2到2之間選擇一個整數，並使用math.random(0,9)函數從0到9之間選擇一個整數，這兩個整數組合起來成為一個小數，表示為第一個數字。
--同樣地，使用math.random(-1, 1)函數從-1到1之間選擇一個整數，並使用math.random(0,4)函數從0到4之間選擇一個整數，這兩個整數組合起來成為另一個小數，表示為第二個數字。
--最後，固定設置第三個數字為1.0，並將這三個數字放入一個列表中，作為函數的返回值。


function regress()
    sim.pauseSimulation()
    sim.setObjectPosition(bubbleRobBase, -1, initialBubbleRobPosition)
    sim.setObjectOrientation(bubbleRobBase, -1, initialBubbleRobOrientation)
    sim.setObjectPosition(ball, -1, randomNumber())
    sim.setObjectOrientation(ball, -1, initialballOrientation)
    sim.setObjectPosition(23, -1, initia)
    sim.setObjectOrientation(23, -1, initial)
end
--這段程式碼包含一個名為regress()的函數，用於將機器人和球體重置到遊戲開始時的位置。
--在函數內部，程式暫停模擬運行，並使用sim.setObjectPosition()和sim.setObjectOrientation()函數將機器人和球體移回初始位置。

function Toclear()
    for i = 1, 7 do
        for x = 1, 4 do
            handle = handles[x][i]
            sim.setShapeColor(handle, nil, sim.colorcomponent_ambient_diffuse, color[2])
        end
    end
end
--Toclear的函數，它的作用是清除計分板，也就是把所有的計分板LED燈恢復到預設的顏色。

--函數使用了巢狀的for迴圈，首先從1到7遍歷一遍行，然後再從1到4遍歷一遍列，這樣就可以遍歷所有的計分板LED燈。

--在迴圈內部，函數通過handle變量獲取每個LED燈的控制句柄，然後使用sim.setShapeColor函數將其顏色設置為預設顏色（在color表中的索引為2的顏色）。
--這樣，所有的計分板LED燈都會被恢復到預設的顏色，從而達到清除計分板的目的。

function Number(displayNumber,ser)
    for i = 1, 7 do
        for j = 1, #specialNumbers[ser] do
            if i == specialNumbers[ser][j] then
                sim.setShapeColor(handles[displayNumber][i], nil, sim.colorcomponent_ambient_diffuse, color[1])
                break
            end
        end
    end
end


--這段程式碼是一個顯示數字的函數，它有兩個參數，一個是要顯示的數字 displayNumber，另一個是顯示器的類型 ser。
--這個函數的作用是將 displayNumber 這個數字顯示在屏幕上，屏幕的類型由 ser 決定。

--程式碼使用了嵌套的迴圈，第一個迴圈從 1 到 7 遍歷了七個數碼的 LED 顯示燈，第二個迴圈從 1 到 specialNumbers[ser] 的長度遍歷了指定類型的顯示屏上的特殊數碼。
--對於每個數碼燈，它會檢查這個燈是否是指定類型的顯示屏上的特殊數碼。如果是，它就會將該燈的顏色設置為顯示數字的顏色。


function scoreboard(number)
    local numberString = tostring(number)
    if #numberString &lt; 2 then
        numberString = '0' .. numberString
    end
    local tensDigit = tonumber(numberString:sub(1, 1))
    local onesDigit = tonumber(numberString:sub(2, 2))
    return{tensDigit,onesDigit}
end

--這段程式碼定義了一個名為 scoreboard 的函數，該函數接受一個整數 number 作為參數，並將其轉換為兩位數的字串表示。

--如果傳入的 number 參數的長度小於2，則會在數字前面添加一個0，這樣就可以確保數字的表示總是兩位數。
--然後，這個函數會提取這個兩位數字串的每一位數字，分別存儲在一個名為 tensDigit 的變數和一個名為 onesDigit 的變數中。最後，這個函數會返回一個包含這兩個數字的表。
function sysCall_init()
    sensor1 = sim.getObject('./door1')
    sensor2 = sim.getObject('./door2')
    bubbleRobBase = 16
    ball = 30
    initialBubbleRobPosition = sim.getObjectPosition(bubbleRobBase, -1)
    initialBubbleRobOrientation = sim.getObjectOrientation(bubbleRobBase, -1)
    initia = sim.getObjectPosition(23, -1)
    initial = sim.getObjectOrientation(23, -1)
    initialballPosition = sim.getObjectPosition(ball, -1)
    initialballOrientation = sim.getObjectOrientation(ball, -1)
    -- do some initialization here
    count = 18000  -- ??30????????????
    score1 = 0  -- ??????
    score2 = 0

    xml = [[
        &lt;ui closeable="false" resizeable="false" activate="false"&gt;
            &lt;label text="30:00" style="* {background-color: #F00; color: #FFF; font-size: 32px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="10"/&gt;
            &lt;label text="0" style="* {background-color: #071E4B; color: #FFF ; font-size: 32px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="20"/&gt;
            &lt;label text="0" style="* {background-color: #071E4B; color: #FFF ; font-size: 32px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="30"/&gt;
        &lt;/ui&gt;
    ]]
    ui = simUI.create(xml)
    simUI.setPosition(ui, 0,0, true)
    for i = 1, 7 do
        for x = 1, 4 do
            ii = tostring(x) .. serialNumber[i]
            local handle = sim.getObjectHandle("./scoreboard/".. ii )
            handles[x][i] = handle
        end
    end
end
--透過sim.getObject()取得門的物件句柄，並存入sensor1和sensor2變數中。
指定bubbleRobBase和ball變數分別為16和30，代表這些物件在模擬場景中的物件句柄。
透過sim.getObjectPosition()和sim.getObjectOrientation()取得模擬場景中物件的位置和方向資訊，
分別存入initialBubbleRobPosition、initialBubbleRobOrientation、initialballPosition和initialballOrientation變數中。
將23號物件的位置和方向資訊分別存入initia和initial變數中。
將count、score1和score2分別初始化為18000、0和0。
創建一個簡單的UI介面，包含三個標籤(label)元件，分別代表倒數計時、兩個隊伍的得分。
將介面移動到視窗左上角，並將其設為不可關閉、不可縮放和不可激活。
設定用於記分牌的物件的物件句柄並存儲在handles二維陣列中。透過一個雙重迴圈，
將所有的記分牌物件句柄存儲到handles變數中。(handles 是一個二維陣列，
用於儲存多個物體在仿真環境中的句柄（handle）。
二維陣列意味著它包含多個一維陣列，每個一維陣列都儲存了某一個維度上的物體句柄。
在這裡，handles 有四個一維陣列，分別儲存了四個不同的元件在七個不同位置的句柄。
通過這個二維陣列，程式可以方便地訪問並修改這些物體的屬性。)
function sysCall_actuation()
    result1=sim.readProximitySensor(sim.getObject('./door1'))
    result2=sim.readProximitySensor(sim.getObject('./door2'))
    -- 0 or 1
    if(result1&gt;0)then
        regress()
        score1 = score1 +1 
        
    end
--此函數為一個回調函數，它會在仿真器每個時間步驟中被自動調用。在此函數中，首先透過sim.getObject('./door1')和sim.getObject('./door2')獲取到與感測器關聯的對象。
然後通過sim.readProximitySensor函數檢測與感測器對應的物體是否被觸發，
並將檢測結果存儲在result1和result2變量中。
如果result1大於0，表示感測器檢測到物體，此時會調用regress()函數和加分操作，即分數score1加1。

  if(result2&gt;0)then
        regress()
        score2 = score2 +1 

    end
--如果result2大於0，表示感測器檢測到物體，此時會調用regress()函數和加分操作，即分數score2加1。
if count &gt; 0 then
        count = count - 1
        local minutes = math.floor(count / 60)
        local seconds = count % 60
        local timeStr = string.format("%d:%02d", minutes, seconds)
        simUI.setLabelText(ui, 10, timeStr)
        simUI.setLabelText(ui, 20, tostring(score1))
        simUI.setLabelText(ui, 30, tostring(score2))
        red = scoreboard(score1)
        blue = scoreboard(score2)
        Toclear()
        for i = 1, 2 do
            Number(i,red[i])
            Number(i+2,blue[i])
        end
    else
        sim.stopSimulation()
    end

end
--此段程式碼為在仿真環境中，用來更新計分板和倒數計時器的功能。
當遊戲倒數計時器仍有剩餘時間（count &gt; 0），會依照每個計數間隔（1秒）進行更新。
更新內容包含：剩餘時間的計算、將計算後的時間顯示在UI的倒數計時器上、顯示當前紅藍雙方的得分，
同樣也是透過UI的label顯示。
接著，程式會進入計分板的顯示功能。這邊透過呼叫Toclear()，先清除所有計分板的數字。
再透過迴圈讀取紅藍雙方的分數，分別呼叫Number()函數，在計分板上顯示對應的數字。
若遊戲倒數計時器已歸零，則程式會執行sim.stopSimulation()，停止遊戲仿真。
function sysCall_cleanup()
    Toclear()
end
--此程式為清理函數，當仿真停止時，會呼叫此函數，其目的為將目前顯示在分數板上的數字全部清除，使得下一次的遊戲能夠從零開始顯示分數。在此函數中，會呼叫之前已定義的Toclear()函數，該函數會將所有的數字方塊改變為背景色，以達到清空的效果。



</pre>
<p><strong><span> </span></strong></p>
<p> </p>
<p><strong><span></span></strong></p>
<p><strong><span>__________________________________________________________________________</span></strong></p>
<h2>機械式記分板</h2>
<p><em><strong>2023/5/7</strong></em></p>
<p><strong>第三版記分板:</strong></p>
<p><strong>因前面對老師的要求理解錯誤，我們做成隨得分改變顏色的記分板設計，因此做了這版來滿足老師所要求的機械式設計。</strong></p>
<p><strong><img alt="" height="315" src="/images/記分板1.png" width="560"/></strong></p>
<p><strong><span><img alt="" height="315" src="/images/記分板2.png" width="560"/></span></strong></p>
<p><strong><span>上圖紅色圓形部分為固定銷，白色圓形部分是可向前推動的銷，可實現將桿件向前推送達成數字顯示的效果。</span></strong></p>
<p><strong><span><a href="/downloads/記分板(機械式.stl">記分板(機械式.stl)</a></span></strong></p>
<p><strong><span>第四版</span></strong></p>
<p><strong><span><a href="/downloads/機械計分.ttt">/downloads/機械計分.ttt</a></span></strong></p>
<p><strong><span>使用原理:使用joint推動顯示器使其顯示數字</span></strong></p>
<p><strong><span>馬達</span></strong></p>
<p><span style="background-color: #ffff00;"><strong>Add&gt;Joint&gt;Prismatic</strong></span></p><h2>機械程式</h2>
<p><span style="background-color: #ffff00;"><strong>如何操控馬達?</strong></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">joint=sim.getObjectHandle('./joint')
sim.setJointTargetPosition(joint,0.1)
--物體移動到絕對座標(0.1)
sim.setJointTargetPosition(joint,0)
--物體移動到絕對座標(0.0)</pre>
<p><span style="background-color: #ffff00;">測試方塊0</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    joint=sim.getObjectHandle('./Cuboid[0]/joint')
    sim.setJointTargetPosition(joint,-0.1)
end</pre>
<p><br/><br/></p><h1>ssh</h1>
<p><span class="TextRun SCXO49545015 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO49545015 BCX8">(登入 stud2.cycu.org)利用 @nfu 電子郵箱收到的帳號與密碼, 登入 stud2.cycu.org:  在命令列視窗, 以 <span style="background-color: #ff0000;">ssh </span></span></span><span class="TextRun SCXO49545015 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO49545015 BCX8"><span style="background-color: #ff0000;">cd學號@stud2.cycu.org</span> , 輸入對應密碼後, 可以登入系統</span></span><span class="EOP SCXO49545015 BCX8"> </span></p>
<p><span data-contrast="auto"><span>與在近端(Windows)利用  SSH 建立 public/private keys 流程相同, 必須在 Linux (Ubuntu) 利用 <span style="background-color: #ff0000;">ssh-keygen</span> 建立 keys. 所產生的 id_rsa 為 private key, 而 id_rsa.pub 為 public key, 都位於 .ssh 目錄下.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>利用 sftp  進入 stud2.cycu.org 後, cd 到 .ssh, 以 get id_rsa.pub 將 public key 取至  Windows 後, 送到 Github -&gt; Settings -&gt; SSH and GPG 設定區, 透過 new key 登錄公鑰.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>接下來要下載  </span></span><span style="background-color: #ffff00;"><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EQlQii99WuZEl2_6YB_WK28BgZ3sBCVZnmLjLFJS5kXuPQ?e=0i7OKP" style="background-color: #ffff00;"><span data-contrast="auto">config</span></a></span><span data-contrast="auto"><span> 設定檔案,  以 sftp 放入 stud2.cycu.org 主機的 .ssh 目錄中.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>上面的  config  主要設定 SSH 協定對  github.com  連線時的代理主機, 但取下  cmsimde  子模組使用的是  https,  因此執行下列  git clone 時將會同時用到   SSH  與 https  協定,  因此除了  .ssh  目錄下要有  config  設定檔案外, 也必須同時在  .gitconfig  檔案中設定  http.proxy,  也就是以 <span style="background-color: #00ffff;">git config --global http.proxy </span></span></span><span style="background-color: #00ffff;"><a href="http://p42.cycu.org:3128/" style="background-color: #00ffff;"><span data-contrast="auto">http://p42.cycu.org:3128</span></a></span><span data-contrast="auto"><span> </span></span><span data-contrast="auto"><span>設定供 https 連線使用的代理主機, 並且以  <span style="background-color: #00ffff;">git config --global  user.name "&lt;名字&gt;"</span> 以及 <span style="background-color: #00ffff;"> git config --global  user.email "&lt;信箱&gt;"</span> 設定提交用的身分註記.</span></span><span> </span></p>
<p><span><span class="TextRun BCX8 SCXO210595166" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun BCX8 SCXO210595166">在 stud2.cycu.org 中, 以 <span style="background-color: #00ffff;">git clone &lt;預取下的倉儲&gt; </span></span></span><span class="TextRun SCXO210595166 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO210595166 BCX8">取下倉儲</span></span></span></p>
<p><span><span class="TextRun SCXO210595166 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO210595166 BCX8"><span class="TextRun SCXO123141762 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO123141762 BCX8">接著下載 </span></span><span style="background-color: #ffff00;"><a class="Hyperlink SCXO123141762 BCX8" href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB" rel="noreferrer noopener" style="background-color: #ffff00;" target="_blank"><span class="TextRun SCXO123141762 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO123141762 BCX8">server.py</span></span></a></span><span class="TextRun SCXO123141762 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO123141762 BCX8">, 在 Windows 編輯<span> </span></span></span><a class="Hyperlink SCXO123141762 BCX8" href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB" rel="noreferrer noopener" target="_blank"><span class="TextRun SCXO123141762 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO123141762 BCX8">server.py</span></span></a><span class="TextRun SCXO123141762 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO123141762 BCX8">, 將個人分配到的 9xxxx 埠號填入後存.<span class="EOP SCXO123141762 BCX8"> </span>檔, 以 sftp 放入上列取下的倉儲根目錄</span></span></span></span></span></p>
<p><span data-contrast="auto"><span>在 stud2.cycu.org 系統中, 進入倉儲 (site-github帳號) 後, 執行 <span style="background-color: #ff0000;">python3 server.py </span></span></span><span data-contrast="auto"><span>, 就可啟用動態網站.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>設定完成後, 各學員將會有一個廣域網路上的動態網站 (取代 Replit 上的動態網站),<span class="TextRun BCX8 SCXO243645694" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun BCX8 SCXO243645694"><a href="https://stud2.cycu.org:8">https://stud2.cycu.org:8xxxx</a></span></span></span></span><span data-contrast="auto"><span><span class="TextRun BCX8 SCXO243645694" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun BCX8 SCXO243645694">看到個人的動態網站.</span></span></span></span></p>
<p><span data-contrast="auto"><span><span class="TextRun BCX8 SCXO243645694" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun BCX8 SCXO243645694"><span class="TextRun SCXO38550328 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO38550328 BCX8">動態網站改版後, 轉為靜態, 必須透過 <span style="background-color: #ff0000;">source </span></span></span><span style="background-color: #ff0000;"><a class="Hyperlink SCXO38550328 BCX8" href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EZn5-jIdQ3pMmi_QxSVWWoYBHvcEtgUrAGCPiIlPyDQ6sw?e=9mc7rR" rel="noreferrer noopener" style="background-color: #ff0000;" target="_blank"><span class="TextRun SCXO38550328 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO38550328 BCX8">acp</span></span></a></span><span class="TextRun SCXO38550328 BCX8" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun SCXO38550328 BCX8"><span> </span>以 SSH 將改版內容送回 github. (必須利用 chmod u+x acp 將 acp  檔案屬性改為對  user 可以 execute (也就是 x 屬性)。</span></span></span></span></span></span></p>
<h1>相關連結</h1>
<p><a href="https://mde.tw/pjcopsim/content/index.html">CoppeliaSim 4.3.0 使用者手冊</a></p>
<p><a href="https://chat.openai.com/">chatGTP</a></p>
<p><a href="https://41023125.github.io/cp2021_hw/content/%E5%BB%BA%E7%AB%8B%E5%80%89%E5%84%B2.html">建立倉儲</a></p>
<p><a href="https://41023125.github.io/cp2021_hw/content/Personal%20access%20tokens(%E7%A2%BC%E7%89%8C).html">建立token</a></p>
<p><a href="https://drive.google.com/file/d/1KlC7rREf4laOPVHQsBzcuEokXiFBW9c7/view?usp=share_link">可攜</a></p>
<h2>key.py</h2>
<p><a href="https://41023125.github.io/learning-process/downloads/ket.py/key.py">key.py</a></p>
<p><a href="https://41023125.github.io/learning-process/downloads/ket.py/key.bat">key.bat</a></p>
<h1>相關指令</h1>
<h2>取消commit</h2>
<p><a href="https://www.php.cn/tool/git/507281.html#:~:text=%E5%8F%96%E6%B6%88%20commit%20%E6%93%8D%E4%BD%9C%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E6%89%A7%E8%A1%8C%E4%BA%86%20commit%20%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BD%86%E5%90%8E%E6%9D%A5%E5%8F%91%E7%8E%B0%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E6%9C%89%E9%94%99%E8%AF%AF%E3%80%81%E6%88%96%E8%80%85%E6%8F%90%E4%BA%A4%E7%9A%84%E5%86%85%E5%AE%B9%E6%9C%89%E8%AF%AF%EF%BC%8C%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E4%BF%AE%E6%94%B9%E4%B9%8B%E5%90%8E%E5%86%8D%E6%AC%A1%E6%8F%90%E4%BA%A4%EF%BC%8C%E8%BF%99%E6%97%B6%E6%88%91%E4%BB%AC%E5%B0%B1%E9%9C%80%E8%A6%81%E5%8F%96%E6%B6%88%E4%B8%8A%E4%B8%80%E6%AC%A1%20commit%20%E6%93%8D%E4%BD%9C%E3%80%82,commit%20%E6%93%8D%E4%BD%9C%E4%B8%80%E8%88%AC%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%9A%E4%BD%BF%E7%94%A8%20git%20revert%20%E5%91%BD%E4%BB%A4%E6%88%96%E4%BD%BF%E7%94%A8%20git%20reset%20%E5%91%BD%E4%BB%A4%E3%80%82">git中如何取消 commit 操作</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --soft HEAD^</pre>
<p><span>這個命令將撤銷最後一個提交，但保留更改。如果您需要撤銷更多的提交，可以使用</span>HEAD~n</p>
<p><code class="inline-flex max-w-full overflow-hidden rounded-sm cursor-pointer"></code><span>其中</span>n<code class="inline-flex max-w-full overflow-hidden rounded-sm cursor-pointer"></code><span>是要撤銷的提交數量。例如，如果您要撤銷最後兩個提交，可以使用以下命令：</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --soft HEAD~2</pre>
<p></p>
<h2>恢復之前版本</h2>
<p><a href="https://blog.csdn.net/yxlshk/article/details/79944535">Git恢复之前版本的两种方法reset、revert（图文详解）</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git reset --hard &lt;目標版本號&gt;</pre>
<p><br/><br/></p>
<h2>強制push</h2>
<p><strong><a href="https://www.delftstack.com/zh-tw/howto/git/git-push-force/">Git 推送強制更改</a></strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git push origin main --force</pre>
<p></p>